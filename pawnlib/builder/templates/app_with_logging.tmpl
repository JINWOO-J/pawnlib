#!/usr/bin/env python3
from pawnlib.config import pawnlib_config as pawn
from pawnlib.utils.log import AppLogger
from pawnlib.output import *
{% if use_daemon == true -%}
import sys
import time
from pawnlib.utils.operate_handler import Daemon
{% endif %}

{% if banner -%}
def print_banner():
    {%- for banner_string in banner %}
    print('{{banner_string}}')
    {%- endfor %}
{%- endif %}


def main():
    LOG_DIR = f"{get_real_path(__file__)}/logs"
    APP_NAME = "{{ app_name }}"
    STDOUT = True
    pawn.set(
        PAWN_LOGGER=dict(
            log_path=LOG_DIR,
            stdout=STDOUT,
            use_hook_exception=True,
        ),
        PAWN_DEBUG=True, # Don't use production, because it's not stored exception log.
        app_name=APP_NAME,
        app_data={}
    )

    pawn.app_logger.info("App logger initializing")
    pawn.error_logger.error("Error logger initializing")
    pawn.console.log(pawn.to_dict())

    debug_logging(pawn.to_dict())
    dump(pawn.to_dict())

    {% if use_daemon == true -%}
    while True:
        # MainLoop
        print("This is Daemon")
        time.sleep(1)
    {% endif %}

if __name__ == "__main__":
    {%- if banner %}
    print_banner()
    {%- endif %}
    {%- if use_daemon == true %}
    if len(sys.argv) != 2:
        print("")
        sys.exit()
    command = sys.argv[1]
    daemon = Daemon(
        pidfile="/tmp/{{app_name}}.pid",
        func=main
    )
    if command == "start":
        daemon.start()
    elif command == "stop":
        daemon.stop()
    else:
        print("command not found [start/stop]")
    {%- else %}
    main()
    {% endif %}
